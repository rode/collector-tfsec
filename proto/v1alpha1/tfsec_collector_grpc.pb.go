// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TfsecCollectorClient is the client API for TfsecCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TfsecCollectorClient interface {
	CreateScan(ctx context.Context, in *CreateScanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type tfsecCollectorClient struct {
	cc grpc.ClientConnInterface
}

func NewTfsecCollectorClient(cc grpc.ClientConnInterface) TfsecCollectorClient {
	return &tfsecCollectorClient{cc}
}

func (c *tfsecCollectorClient) CreateScan(ctx context.Context, in *CreateScanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tfsec_collector.v1alpha1.TfsecCollector/CreateScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TfsecCollectorServer is the server API for TfsecCollector service.
// All implementations should embed UnimplementedTfsecCollectorServer
// for forward compatibility
type TfsecCollectorServer interface {
	CreateScan(context.Context, *CreateScanRequest) (*emptypb.Empty, error)
}

// UnimplementedTfsecCollectorServer should be embedded to have forward compatible implementations.
type UnimplementedTfsecCollectorServer struct {
}

func (UnimplementedTfsecCollectorServer) CreateScan(context.Context, *CreateScanRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScan not implemented")
}

// UnsafeTfsecCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TfsecCollectorServer will
// result in compilation errors.
type UnsafeTfsecCollectorServer interface {
	mustEmbedUnimplementedTfsecCollectorServer()
}

func RegisterTfsecCollectorServer(s grpc.ServiceRegistrar, srv TfsecCollectorServer) {
	s.RegisterService(&TfsecCollector_ServiceDesc, srv)
}

func _TfsecCollector_CreateScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TfsecCollectorServer).CreateScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tfsec_collector.v1alpha1.TfsecCollector/CreateScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TfsecCollectorServer).CreateScan(ctx, req.(*CreateScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TfsecCollector_ServiceDesc is the grpc.ServiceDesc for TfsecCollector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TfsecCollector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tfsec_collector.v1alpha1.TfsecCollector",
	HandlerType: (*TfsecCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateScan",
			Handler:    _TfsecCollector_CreateScan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1alpha1/tfsec_collector.proto",
}
